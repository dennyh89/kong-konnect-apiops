openapi: 3.0.0
servers:
  - url: https://httpbin.local
info:
  contact:
    email: me@kennethreitz.org
    url: https://kennethreitz.org
    x-responsibleDeveloper: Kenneth Reitz
    x-responsibleOrganization: Kenneth Reitz
  description: "A simple HTTP Request & Response Service.<br/> <br/> <b>Run locally: </b> <code>$ docker run -p 80: 80 kennethreitz/httpbin</code>"
  title: httpbin.org
  version: 0.9.2
  x-apisguru-categories:
    - developer_tools
  x-origin:
    - format: swagger
      url: http://httpbin.org/spec.json
      version: "2.0"
  x-providerName: httpbin.org
tags:
  - description: Testing different HTTP verbs
    name: HTTP Methods
  - description: Generates responses with given status code
    name: Status codes
  - description: Inspect the request data
    name: Request inspection
paths:
  /delay/{delay}:
    get:
      parameters:
        - in: path
          name: delay
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: A delayed response.
      summary: Returns a delayed response (max of 10 seconds).
      tags:
        - Dynamic data
      operationId: get_delay_delay

  /get:
    get:
      responses:
        "200":
          description: The request's query parameters.
      summary: The request's query parameters.
      tags:
        - HTTP Methods
      operationId: get_get
  /headers:
    get:
      responses:
        "200":
          description: The request's headers.
      summary: Return the incoming request's HTTP headers.
      tags:
        - Request inspection
      operationId: get_headers
  /post:
    post:
      responses:
        "200":
          description: The request's POST parameters.
      summary: The request's POST parameters.
      tags:
        - HTTP Methods
      operationId: post_post
  /put:
    put:
      responses:
        "200":
          description: The request's PUT parameters.
      summary: The request's PUT parameters.
      tags:
        - HTTP Methods
      operationId: put_put
  /status/{codes}:
    get:
      parameters:
        - in: path
          name: codes
          required: true
          schema:
            type: string
      responses:
        "100":
          description: Informational responses
        "200":
          description: Success
        "300":
          description: Redirection
        "400":
          description: Client Errors
        "500":
          description: Server Errors
      summary: Return status code or random status code if more than one are given
      tags:
        - Status codes
      operationId: get_status_codes
x-protocol: https
